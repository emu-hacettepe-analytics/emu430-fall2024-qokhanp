#Saatleri dakikaya çevirme fonksiyonu
convert_duration_to_minutes <- function(duration) {
# NA kontrolü
if (is.na(duration)) {
return(NA)
}
# Sadece saat olan durumlar için kontrol (örn: "2h")
if (grepl("^\\d+h$", duration)) {
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
}
# Saat ve dakika olan durumlar için (örn: "2h 7m")
parts <- strsplit(duration, " ")[[1]]
hours <- as.numeric(gsub("h$", "", parts[1]))
minutes <- as.numeric(gsub("m$", "", parts[2]))
return(hours * 60 + minutes)
}
#| echo: false
# Oy sayılarını temizlemek için bir yardımcı fonksiyon
clean_vote <- function(vote) {
# Çift tırnakları ve boşlukları kaldır
vote <- str_replace_all(vote, '"', "")         # Çift tırnakları kaldır
vote <- str_trim(vote)                        # Başındaki ve sonundaki boşlukları kaldır
# Eğer 'K' harfi içeriyorsa (binler için)
if (grepl("K", vote)) {
vote <- str_replace_all(vote, "[()K]", "")  # Parantezleri ve 'K' harfini kaldır
vote <- str_replace_all(vote, "\\.", "")    # Noktaları kaldır (örneğin 7.9K -> 7900)
return(as.numeric(vote) * 1000)             # 1000 ile çarp
# Eğer 'M' harfi içeriyorsa (milyonlar için)
} else if (grepl("M", vote)) {
vote <- str_replace_all(vote, "[()M]", "")  # Parantezleri ve 'M' harfini kaldır
return(as.numeric(vote) * 1e6)              # 1 milyon ile çarp
# Diğer durumlar
} else {
vote <- str_replace_all(vote, "[()]", "")   # Sadece parantezleri kaldır
return(as.numeric(vote))                   # Sayıya çevir
}
}
#| echo: true
#| warning: false
# Tüm veriler için boş bir liste oluştur
all_movies <- list()
for (url in urls) {
data_html <- read_html(url)
# Başlıkları çekme ve temizleme
titles <- data_html |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1)
titles <- head(titles, -1)
# Kodlamayı ve boşlukları düzelt
cleaned_titles <- sapply(titles, simplify_text)
# Benzersiz başlıkları seçmek ve bozuk olanları temizlemek
cleaned_titles <- unique(cleaned_titles)  # Tekrarlayan başlıkları kaldır
cleaned_titles <- cleaned_titles[!grepl("\\?\\u", cleaned_titles)]  # Bozuk başlıkları kaldır
# Yılları çekme
years <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(1)') |>
html_text() |>
str_extract("\\d{4}") |>
as.numeric()
durations <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(2)') |>
html_text()
# Süreleri dakikaya çevirme
convert_duration_to_minutes <- function(duration) {
# Saat ve dakika formatını kontrol et
if (grepl("^\\d+h$", duration)) {
# Sadece saat varsa (örn: "2h")
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
} else {
# Saat ve dakika varsa (örn: "2h 7m")
matches <- str_match(duration, "(\\d+)h (\\d+)m")
hours <- as.numeric(matches[, 2])
minutes <- as.numeric(matches[, 3])
return(hours * 60 + minutes)
}
}
# Tüm süreleri dakikaya çevir
durations_in_minutes <- sapply(durations, convert_duration_to_minutes)
# Puanları çekme
ratings <- data_html |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy sayısını çekme ve temizleme
votes_raw <- data_html |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
votes_clean <- sapply(votes_raw, clean_vote)
# Veri çerçevesi oluşturma
movies <- data.frame(
Title = cleaned_titles,
Year = years,
Duration = durations_in_minutes,
Rating = ratings,
Votes = votes_clean
)
# Tüm filmleri birleştir
all_movies <- append(all_movies, list(movies))
# Sıra numarasını ve noktayı kaldır
movies$Title <- gsub("^\\d+\\.\\s*", "", movies$Title)
}
# Sonuçları birleştir
final_movies <- bind_rows(all_movies)
# Gereksiz boşlukları kaldır
movies$Title <- trimws(movies$Title)
# Veri çerçevesini görüntüleme
print(all_movies)
View(final_movies)
#| echo: true
#| warning: false
# Tüm veriler için boş bir liste oluştur
all_movies <- list()
for (url in urls) {
data_html <- read_html(url)
# Başlıkları çekme ve temizleme
titles <- data_html |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1)
titles <- head(titles, -1)
titles <- append(titles, list(titles))
# Kodlamayı ve boşlukları düzelt
cleaned_titles <- sapply(titles, simplify_text)
# Benzersiz başlıkları seçmek ve bozuk olanları temizlemek
cleaned_titles <- unique(cleaned_titles)  # Tekrarlayan başlıkları kaldır
cleaned_titles <- cleaned_titles[!grepl("\\?\\u", cleaned_titles)]  # Bozuk başlıkları kaldır
# Yılları çekme
years <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(1)') |>
html_text() |>
str_extract("\\d{4}") |>
as.numeric()
durations <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(2)') |>
html_text()
# Süreleri dakikaya çevirme
convert_duration_to_minutes <- function(duration) {
# Saat ve dakika formatını kontrol et
if (grepl("^\\d+h$", duration)) {
# Sadece saat varsa (örn: "2h")
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
} else {
# Saat ve dakika varsa (örn: "2h 7m")
matches <- str_match(duration, "(\\d+)h (\\d+)m")
hours <- as.numeric(matches[, 2])
minutes <- as.numeric(matches[, 3])
return(hours * 60 + minutes)
}
}
# Tüm süreleri dakikaya çevir
durations_in_minutes <- sapply(durations, convert_duration_to_minutes)
# Puanları çekme
ratings <- data_html |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy sayısını çekme ve temizleme
votes_raw <- data_html |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
votes_clean <- sapply(votes_raw, clean_vote)
# Veri çerçevesi oluşturma
movies <- data.frame(
Title = cleaned_titles,
Year = years,
Duration = durations_in_minutes,
Rating = ratings,
Votes = votes_clean
)
# Tüm filmleri birleştir
all_movies <- append(all_movies, list(movies))
# Sıra numarasını ve noktayı kaldır
movies$Title <- gsub("^\\d+\\.\\s*", "", movies$Title)
}
#| echo: false
movies_2010_2023 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-30&num_votes=2500,&country_of_origin=TR&count=250"
movies_before_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
urls <- c(movies_2010_2023, movies_before_2010)
# Vektörü görüntüleme
print(urls)
#| echo: false
# Türkçe karakterleri basit ASCII karakterlere dönüştür
simplify_text <- function(text) {
# Geçersiz karakterleri kaldır ve UTF-8 kodlamasına zorla
text <- iconv(text, from = "UTF-8", to = "ASCII//TRANSLIT", sub = "")
# Başındaki ve sonundaki boşlukları temizle
text <- gsub("^\\s+|\\s+$", "", text)
return(text)
}
#| echo: false
#Saatleri dakikaya çevirme fonksiyonu
convert_duration_to_minutes <- function(duration) {
# NA kontrolü
if (is.na(duration)) {
return(NA)
}
# Sadece saat olan durumlar için kontrol (örn: "2h")
if (grepl("^\\d+h$", duration)) {
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
}
# Saat ve dakika olan durumlar için (örn: "2h 7m")
parts <- strsplit(duration, " ")[[1]]
hours <- as.numeric(gsub("h$", "", parts[1]))
minutes <- as.numeric(gsub("m$", "", parts[2]))
return(hours * 60 + minutes)
}
#| echo: false
# Oy sayılarını temizlemek için bir yardımcı fonksiyon
clean_vote <- function(vote) {
# Çift tırnakları ve boşlukları kaldır
vote <- str_replace_all(vote, '"', "")         # Çift tırnakları kaldır
vote <- str_trim(vote)                        # Başındaki ve sonundaki boşlukları kaldır
# Eğer 'K' harfi içeriyorsa (binler için)
if (grepl("K", vote)) {
vote <- str_replace_all(vote, "[()K]", "")  # Parantezleri ve 'K' harfini kaldır
vote <- str_replace_all(vote, "\\.", "")    # Noktaları kaldır (örneğin 7.9K -> 7900)
return(as.numeric(vote) * 1000)             # 1000 ile çarp
# Eğer 'M' harfi içeriyorsa (milyonlar için)
} else if (grepl("M", vote)) {
vote <- str_replace_all(vote, "[()M]", "")  # Parantezleri ve 'M' harfini kaldır
return(as.numeric(vote) * 1e6)              # 1 milyon ile çarp
# Diğer durumlar
} else {
vote <- str_replace_all(vote, "[()]", "")   # Sadece parantezleri kaldır
return(as.numeric(vote))                   # Sayıya çevir
}
}
#| echo: true
#| warning: false
# Tüm veriler için boş bir liste oluştur
# Tüm filmler için boş bir liste oluştur
all_movies <- list()
# Her URL için veri çekme
for (url in urls) {
data_html <- read_html(url)
# Başlıkları çek ve temizle
titles <- data_html |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)     # Son öğeyi kaldır
# Yılları çek
years <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(1)') |>
html_text() |>
str_extract("\\d{4}") |>
as.numeric()
# Süreleri çek ve dakikaya çevir
durations <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(2)') |>
html_text()
convert_duration_to_minutes <- function(duration) {
if (grepl("^\\d+h$", duration)) {
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
} else if (grepl("\\d+h \\d+m", duration)) {
matches <- str_match(duration, "(\\d+)h (\\d+)m")
hours <- as.numeric(matches[, 2])
minutes <- as.numeric(matches[, 3])
return(hours * 60 + minutes)
} else {
return(NA)
}
}
durations_in_minutes <- sapply(durations, convert_duration_to_minutes)
# Puanları çek
ratings <- data_html |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy sayısını çek ve temizle
votes_raw <- data_html |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
clean_vote <- function(vote) {
as.numeric(gsub(",", "", vote))
}
votes_clean <- sapply(votes_raw, clean_vote)
# Veri çerçevesi oluştur
movies <- data.frame(
Title = titles,
Year = years,
Duration = durations_in_minutes,
Rating = ratings,
Votes = votes_clean,
stringsAsFactors = FALSE
)
# Filmleri listeye ekle
all_movies <- append(all_movies, list(movies))
}
# Tüm filmleri birleştir
final_movies <- bind_rows(all_movies)
# Sonuçları görüntüle
print(final_movies)
#| echo: true
#| warning: false
# Tüm veriler için boş bir liste oluştur
all_movies <- list()
for (url in urls) {
# URL'den HTML verisini çek
data_html <- read_html(url)
# Başlıkları çekme ve temizleme
titles <- data_html |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1)
titles <- head(titles, -1)
# Kodlamayı ve boşlukları düzelt
cleaned_titles <- sapply(titles, simplify_text)
# Benzersiz başlıkları seçmek ve bozuk olanları temizlemek
cleaned_titles <- unique(cleaned_titles)  # Tekrarlayan başlıkları kaldır
cleaned_titles <- cleaned_titles[!grepl("\\?\\u", cleaned_titles)]  # Bozuk başlıkları kaldır
# Yılları çekme
years <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(1)') |>
html_text() |>
str_extract("\\d{4}") |>
as.numeric()
# Süreleri çekme ve dakikaya çevirme
durations <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(2)') |>
html_text()
convert_duration_to_minutes <- function(duration) {
if (grepl("^\\d+h$", duration)) {
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
} else {
matches <- str_match(duration, "(\\d+)h (\\d+)m")
hours <- as.numeric(matches[, 2])
minutes <- as.numeric(matches[, 3])
return(hours * 60 + minutes)
}
}
durations_in_minutes <- sapply(durations, convert_duration_to_minutes)
# Puanları çekme
ratings <- data_html |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy sayısını çekme ve temizleme
votes_raw <- data_html |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
votes_clean <- sapply(votes_raw, clean_vote)
# Veri çerçevesi oluşturma
movies <- data.frame(
Title = cleaned_titles,
Year = years,
Duration = durations_in_minutes,
Rating = ratings,
Votes = votes_clean
)
# Sıra numarasını ve noktayı kaldır
movies$Title <- gsub("^\\d+\\.\\s*", "", movies$Title)
# Tüm filmleri listeye ekle
all_movies <- append(all_movies, list(movies))
}
# Tüm verileri birleştir
final_movies <- bind_rows(all_movies)
# Gereksiz boşlukları kaldır
final_movies$Title <- trimws(final_movies$Title)
# Veri çerçevesini görüntüleme
print(final_movies)
#| echo: true
#| warning: false
# Tüm veriler için boş bir liste oluştur
all_movies <- list()
for (url in urls) {
data_html <- read_html(url)
# Başlıkları çekme ve temizleme
titles <- data_html |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1)
titles <- head(titles, -1)
# Kodlamayı ve boşlukları düzelt
cleaned_titles <- sapply(titles, simplify_text)
# Benzersiz başlıkları seçmek ve bozuk olanları temizlemek
cleaned_titles <- unique(cleaned_titles)  # Tekrarlayan başlıkları kaldır
cleaned_titles <- cleaned_titles[!grepl("\\?\\u", cleaned_titles)]  # Bozuk başlıkları kaldır
# Yılları çekme
years <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(1)') |>
html_text() |>
str_extract("\\d{4}") |>
as.numeric()
durations <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(2)') |>
html_text()
# Süreleri dakikaya çevirme
convert_duration_to_minutes <- function(duration) {
# Saat ve dakika formatını kontrol et
if (grepl("^\\d+h$", duration)) {
# Sadece saat varsa (örn: "2h")
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
} else {
# Saat ve dakika varsa (örn: "2h 7m")
matches <- str_match(duration, "(\\d+)h (\\d+)m")
hours <- as.numeric(matches[, 2])
minutes <- as.numeric(matches[, 3])
return(hours * 60 + minutes)
}
}
# Tüm süreleri dakikaya çevir
durations_in_minutes <- sapply(durations, convert_duration_to_minutes)
# Puanları çekme
ratings <- data_html |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy sayısını çekme ve temizleme
votes_raw <- data_html |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
votes_clean <- sapply(votes_raw, clean_vote)
# Veri çerçevesi oluşturma
movies <- data.frame(
Title = cleaned_titles,
Year = years,
Duration = durations_in_minutes,
Rating = ratings,
Votes = votes_clean
)
# Tüm filmleri birleştir
all_movies <- append(all_movies, list(movies))
# Sıra numarasını ve noktayı kaldır
movies$Title <- gsub("^\\d+\\.\\s*", "", movies$Title)
}
# Sonuçları birleştir
final_movies <- bind_rows(all_movies)
# Gereksiz boşlukları kaldır
movies$Title <- trimws(movies$Title)
# Veri çerçevesini görüntüleme
print(all_movies)
#| echo: true
#| warning: false
# Tüm veriler için boş bir liste oluştur
all_movies <- list()
for (url in urls) {
data_html <- read_html(url)
# Başlıkları çekme ve temizleme
titles <- data_html |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1)
titles <- head(titles, -1)
# Kodlamayı ve boşlukları düzelt
cleaned_titles <- sapply(titles, simplify_text)
# Benzersiz başlıkları seçmek ve bozuk olanları temizlemek
cleaned_titles <- unique(cleaned_titles)  # Tekrarlayan başlıkları kaldır
cleaned_titles <- cleaned_titles[!grepl("\\?\\u", cleaned_titles)]  # Bozuk başlıkları kaldır
# Yılları çekme
years <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(1)') |>
html_text() |>
str_extract("\\d{4}") |>
as.numeric()
durations <- data_html |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item:nth-child(2)') |>
html_text()
# Süreleri dakikaya çevirme
convert_duration_to_minutes <- function(duration) {
# Saat ve dakika formatını kontrol et
if (grepl("^\\d+h$", duration)) {
# Sadece saat varsa (örn: "2h")
hours <- as.numeric(gsub("h$", "", duration))
return(hours * 60)
} else {
# Saat ve dakika varsa (örn: "2h 7m")
matches <- str_match(duration, "(\\d+)h (\\d+)m")
hours <- as.numeric(matches[, 2])
minutes <- as.numeric(matches[, 3])
return(hours * 60 + minutes)
}
}
# Tüm süreleri dakikaya çevir
durations_in_minutes <- sapply(durations, convert_duration_to_minutes)
# Puanları çekme
ratings <- data_html |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy sayısını çekme ve temizleme
votes_raw <- data_html |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
votes_clean <- sapply(votes_raw, clean_vote)
# Veri çerçevesi oluşturma
movies <- data.frame(
Title = cleaned_titles,
Year = years,
Duration = durations_in_minutes,
Rating = ratings,
Votes = votes_clean
)
# Tüm filmleri birleştir
all_movies <- append(all_movies, list(movies))
# Sıra numarasını ve noktayı kaldır
movies$Title <- gsub("^\\d+\\.\\s*", "", movies$Title)
}
# Sonuçları birleştir
final_movies <- bind_rows(all_movies)
# Gereksiz boşlukları kaldır
movies$Title <- trimws(movies$Title)
# Veri çerçevesini görüntüleme
print(all_movies)
