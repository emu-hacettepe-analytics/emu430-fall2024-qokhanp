# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
years <- metadata[seq(1, length(metadata), by = 2)] |>
str_extract("\\d{4}") |>
as.numeric()
print(years)
durations <- metadata[seq(2, length(metadata), by = 2)] |>
str_replace(" min", "") |>
as.numeric()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Sonuçları kontrol edin
head(data_list[[urls[1]]]$votes)
print(metadata)
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
durations <- metadata[seq(2, length(metadata), by = 2)] |>
str_replace(" min", "") |>
as.numeric()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Sonuçları kontrol edin
head(data_list[[urls[1]]]$votes)
movies_2010_2023 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-30&num_votes=2500,&country_of_origin=TR&count=250"
movies_before_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
urls <- c(movies_2010_2023, movies_before_2010)
# Vektörü görüntüleme
print(urls)
library(tidyverse)
library(rvest)
library(stringr)
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
durations <- metadata[seq(2, length(metadata), by = 2)] |>
str_replace(" min", "") |>
as.numeric()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
durations <- metadata[seq(2, length(metadata), by = 2)] |>
str_replace(" min", "") |>
as.numeric()
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Sonuçları kontrol edin
head(data_list[[urls[1]]]$votes)
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
# Yılları ayıkla
years <- metadata |>
str_extract("^\\d{4}$") |>
as.numeric()
# Süreleri ayıkla
durations <- metadata |>
str_extract("\\d{1,2}h \\d{1,2}m") |>
str_replace("h ", "*60+") |>
str_replace("m", "") |>
parse(text = .) |>
sapply(eval)
# NA'ları temizle
valid_indices <- complete.cases(years, durations)
years <- years[valid_indices]
durations <- durations[valid_indices]
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
# Yılları ayıkla
years <- metadata |>
str_extract("^\\d{4}$") |>
as.numeric()
# Süreleri ayıkla
durations <- metadata |>
str_extract("\\d{1,2}h \\d{1,2}m") |>
str_replace("h ", "*60+") |>
str_replace("m", "") |>
parse(text = .) |>
sapply(eval)
# NA'ları temizle
valid_indices <- complete.cases(years, durations)
years <- years[valid_indices]
durations <- durations[valid_indices]
# Sonuçları kontrol edin
print(years)
print(durations)
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
movies_2010_2023 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-30&num_votes=2500,&country_of_origin=TR&count=250"
movies_before_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
urls <- c(movies_2010_2023, movies_before_2010)
# Vektörü görüntüleme
print(urls)
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)     # Son öğeyi kaldır
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
# Yıllar
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
# Süreler
durations <- metadata |>
str_extract("\\d{1,2}h \\d{1,2}m") |>  # Süre formatını seç
str_replace("h ", "*60+") |>           # "h" kısmını dakikaya çevirmek için işaretle
str_replace("m", "") |>                # "m" kısmını kaldır
parse(text = .) |>                     # Matematiksel ifadeyi çöz
sapply(eval)                           # Sayıya çevir
# NA'ları temizle
valid_indices <- complete.cases(years, durations)
years <- years[valid_indices]
durations <- durations[valid_indices]
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)     # Son öğeyi kaldır
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
# Yıllar
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
# Süreler
durations <- metadata |>
str_extract("\\d{1,2}h \\d{1,2}m") |>  # Süre formatını seç
str_replace("h ", "*60+") |>           # "h" kısmını dakikaya çevirmek için işaretle
str_replace("m", "") |>                # "m" kısmını kaldır
parse(text = .) |>                     # Matematiksel ifadeyi çöz
sapply(eval)                           # Sayıya çevir
# NA'ları temizle
valid_indices <- complete.cases(years, durations)
years <- years[valid_indices]
durations <- durations[valid_indices]
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
durations <- metadata[seq(2, length(metadata), by = 2)] |>
str_replace(" min", "") |>
as.numeric()
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Sonuçları kontrol edin
head(data_list[[urls[1]]]$votes)
# Veri çekmek için boş bir liste oluşturun
data_list <- list()
# Her URL için veri çekimi
for (url in urls) {
page <- read_html(url)
# Başlıklar
titles <- page |>
html_nodes('.ipc-title__text') |>
html_text() |>
tail(-1) |>  # İlk öğeyi kaldır
head(-1)
# Yıllar ve Süreler
metadata <- page |>
html_nodes('.sc-300a8231-7.eaXxft.dli-title-metadata-item') |>
html_text()
years <- metadata |>
str_extract("^\\d{4}$") |>  # Sadece 4 basamaklı yıl bilgilerini seç
as.numeric()
durations <- metadata[seq(2, length(metadata), by = 2)] |>
str_replace(" min", "") |>
as.numeric()
# Oyların ham verisini kontrol et
raw_votes <- page |>
html_nodes('.ipc-rating-star--voteCount') |>
html_text()
# Puanlar
ratings <- page |>
html_nodes('.ipc-rating-star--rating') |>
html_text() |>
as.numeric()
# Oy Sayıları
votes <- raw_votes |>
str_trim() |>                            # Başındaki ve sonundaki boşlukları kaldır
str_replace_all('"', "") |>              # Çift tırnakları kaldır
str_replace_all("K", "e3") |>            # "K"yi bilimsel gösterimle 1000 olarak değiştir
str_replace_all("k", "e3") |>            # "k" için de aynı işlemi yap
parse_number()                           # Metni sayıya dönüştür
# Çekilen verileri listeye ekleyin
data_list[[url]] <- list(
titles = titles,
years = years,
durations = durations,
ratings = ratings,
votes = votes
)
}
# Sonuçları kontrol edin
head(data_list[[urls[1]]]$votes)
